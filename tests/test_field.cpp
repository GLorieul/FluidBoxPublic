
#include <gtest/gtest.h>
#include "field.hpp"
using namespace fb;

TEST(field, equals)
{
    // ONE DIMENSIONAL
    Domain domain1D(Resolution(5), Point(0.0), Distance(1.0));
    Field a1(domain1D, Anchor("C"), GhostCells(0,0));
    Field b1(domain1D, Anchor("C"), GhostCells(0,0));
    Field c1(domain1D, Anchor("C"), GhostCells(1,1));
    Field d1(domain1D, Anchor("C"), GhostCells(0,0));
    Field e1(domain1D, Anchor("C"), GhostCells(0,0));
    Field f1(domain1D, Anchor("C"), GhostCells(0,0));

    a1[0]= 0.0; a1[1]= 1.0; a1[2]= 2.0; a1[3]= 3.0; a1[4]= 4.0;
    b1[0]= 0.0; b1[1]= 1.0; b1[2]= 2.0; b1[3]= 3.0; b1[4]= 4.0;
    c1[0]=-9.0; c1[1]= 0.0; c1[2]= 1.0; c1[3]= 2.0; c1[4]= 3.0; c1[5]= 4.0; c1[6]= 5.0;
    d1[0]=-1.0; d1[1]= 1.0; d1[2]= 2.0; d1[3]= 3.0; d1[4]= 4.0;
    e1[0]= 0.0; e1[1]= 1.0; e1[2]=-1.0; e1[3]= 3.0; e1[4]= 4.0;
    f1[0]= 0.0; f1[1]= 1.0; f1[2]= 2.0; f1[3]= 3.0; f1[4]=-1.0;

    ASSERT_TRUE (a1 == b1);
    ASSERT_TRUE (a1 == c1);
    ASSERT_FALSE(a1 == d1);
    ASSERT_FALSE(a1 == e1);
    ASSERT_FALSE(a1 == f1);

    // TWO DIMENSIONAL

    Domain domain2D(Resolution(5,4), Point(0.0,0.0), Distance(1.0,1.0));
    Field a2(domain2D, Anchor("C"), GhostCells(0,0,0,0));
    Field b2(domain2D, Anchor("C"), GhostCells(0,0,0,0));
    Field c2(domain2D, Anchor("C"), GhostCells(1,1,1,1));
    Field d2(domain2D, Anchor("C"), GhostCells(0,0,0,0));
    Field e2(domain2D, Anchor("C"), GhostCells(0,0,0,0));
    Field f2(domain2D, Anchor("C"), GhostCells(0,0,0,0));

    a2[ 3]=30.0; a2[ 7]=31.0; a2[11]=32.0; a2[15]=33.0; a2[19]=34.0;
    a2[ 2]=20.0; a2[ 6]=21.0; a2[10]=22.0; a2[14]=23.0; a2[18]=24.0;
    a2[ 1]=10.0; a2[ 5]=11.0; a2[ 9]=12.0; a2[13]=13.0; a2[17]=14.0;
    a2[ 0]= 0.0; a2[ 4]= 1.0; a2[ 8]= 2.0; a2[12]= 3.0; a2[16]= 4.0;

    b2[ 3]=30.0; b2[ 7]=31.0; b2[11]=32.0; b2[15]=33.0; b2[19]=34.0;
    b2[ 2]=20.0; b2[ 6]=21.0; b2[10]=22.0; b2[14]=23.0; b2[18]=24.0;
    b2[ 1]=10.0; b2[ 5]=11.0; b2[ 9]=12.0; b2[13]=13.0; b2[17]=14.0;
    b2[ 0]= 0.0; b2[ 4]= 1.0; b2[ 8]= 2.0; b2[12]= 3.0; b2[16]= 4.0;

    c2[ 5]=-9.0; c2[11]=-9.0; c2[17]=-9.0; c2[23]=-9.0; c2[29]=-9.0; c2[35]=-9.0; c2[41]=-9.0;
    c2[ 4]=-9.0; c2[10]=30.0; c2[16]=31.0; c2[22]=32.0; c2[28]=33.0; c2[34]=34.0; c2[40]=-9.0;
    c2[ 3]=-9.0; c2[ 9]=20.0; c2[15]=21.0; c2[21]=22.0; c2[27]=23.0; c2[33]=24.0; c2[39]=-9.0;
    c2[ 2]=-9.0; c2[ 8]=10.0; c2[14]=11.0; c2[20]=12.0; c2[26]=13.0; c2[32]=14.0; c2[38]=-9.0;
    c2[ 1]=-9.0; c2[ 7]= 0.0; c2[13]= 1.0; c2[19]= 2.0; c2[25]= 3.0; c2[31]= 4.0; c2[37]=-9.0;
    c2[ 0]=-9.0; c2[ 6]=-9.0; c2[12]=-9.0; c2[18]=-9.0; c2[24]=-9.0; c2[30]=-9.0; c2[36]=-9.0;

    d2[ 3]=30.0; d2[ 7]=31.0; d2[11]=32.0; d2[15]=33.0; d2[19]=34.0;
    d2[ 2]=20.0; d2[ 6]=21.0; d2[10]=22.0; d2[14]=23.0; d2[18]=24.0;
    d2[ 1]=10.0; d2[ 5]=11.0; d2[ 9]=12.0; d2[13]=13.0; d2[17]=14.0;
    d2[ 0]=-1.0; d2[ 4]= 1.0; d2[ 8]= 2.0; d2[12]= 3.0; d2[16]= 4.0;

    e2[ 3]=30.0; e2[ 7]=31.0; e2[11]=32.0; e2[15]=33.0; e2[19]=34.0;
    e2[ 2]=20.0; e2[ 6]=21.0; e2[10]=-1.0; e2[14]=23.0; e2[18]=24.0;
    e2[ 1]=10.0; e2[ 5]=11.0; e2[ 9]=12.0; e2[13]=13.0; e2[17]=14.0;
    e2[ 0]= 0.0; e2[ 4]= 1.0; e2[ 8]= 2.0; e2[12]= 3.0; e2[16]= 4.0;

    f2[ 3]=30.0; f2[ 7]=31.0; f2[11]=32.0; f2[15]=33.0; f2[19]=-1.0;
    f2[ 2]=20.0; f2[ 6]=21.0; f2[10]=22.0; f2[14]=23.0; f2[18]=24.0;
    f2[ 1]=10.0; f2[ 5]=11.0; f2[ 9]=12.0; f2[13]=13.0; f2[17]=14.0;
    f2[ 0]= 0.0; f2[ 4]= 1.0; f2[ 8]= 2.0; f2[12]= 3.0; f2[16]= 4.0;

    ASSERT_TRUE (a2 == b2);
    ASSERT_TRUE (a2 == c2);
    ASSERT_FALSE(a2 == d2);
    ASSERT_FALSE(a2 == e2);
    ASSERT_FALSE(a2 == f2);

    // THREE DIMENSIONAL

    Domain domain3D(Resolution(5,4,3), Point(0.0,0.0,0.0), Distance(1.0,1.0,1.0));
    Field a3(domain3D, Anchor("C"), GhostCells(0,0,0,0,0,0));
    Field b3(domain3D, Anchor("C"), GhostCells(0,0,0,0,0,0));
    Field c3(domain3D, Anchor("C"), GhostCells(1,1,1,1,1,1));
    Field d3(domain3D, Anchor("C"), GhostCells(0,0,0,0,0,0));
    Field e3(domain3D, Anchor("C"), GhostCells(0,0,0,0,0,0));
    Field f3(domain3D, Anchor("C"), GhostCells(0,0,0,0,0,0));

    a3[11] =230.; a3[23] =231.; a3[35] =232.; a3[47] =233.; a3[59] =234.;
    a3[ 8] =220.; a3[20] =221.; a3[32] =222.; a3[44] =223.; a3[56] =224.;
    a3[ 5] =210.; a3[17] =211.; a3[29] =212.; a3[41] =213.; a3[53] =214.;
    a3[ 2] =200.; a3[14] =201.; a3[26] =202.; a3[38] =203.; a3[50] =204.;
    //-----------------------------------------------------------------//
    a3[10] =130.; a3[22] =131.; a3[34] =132.; a3[46] =133.; a3[58] =134.;
    a3[ 7] =120.; a3[19] =121.; a3[31] =122.; a3[43] =123.; a3[55] =124.;
    a3[ 4] =110.; a3[16] =111.; a3[28] =112.; a3[40] =113.; a3[52] =114.;
    a3[ 1] =100.; a3[13] =101.; a3[25] =102.; a3[37] =103.; a3[49] =104.;
    //-----------------------------------------------------------------//
    a3[ 9] = 30.; a3[21] = 31.; a3[33] = 32.; a3[45] = 33.; a3[57] = 34.;
    a3[ 6] = 20.; a3[18] = 21.; a3[30] = 22.; a3[42] = 23.; a3[54] = 24.;
    a3[ 3] = 10.; a3[15] = 11.; a3[27] = 12.; a3[39] = 13.; a3[51] = 14.;
    a3[ 0] =  0.; a3[12] =  1.; a3[24] =  2.; a3[36] =  3.; a3[48] =  4.;

    b3[11] =230.; b3[23] =231.; b3[35] =232.; b3[47] =233.; b3[59] =234.;
    b3[ 8] =220.; b3[20] =221.; b3[32] =222.; b3[44] =223.; b3[56] =224.;
    b3[ 5] =210.; b3[17] =211.; b3[29] =212.; b3[41] =213.; b3[53] =214.;
    b3[ 2] =200.; b3[14] =201.; b3[26] =202.; b3[38] =203.; b3[50] =204.;
    //-----------------------------------------------------------------//
    b3[10] =130.; b3[22] =131.; b3[34] =132.; b3[46] =133.; b3[58] =134.;
    b3[ 7] =120.; b3[19] =121.; b3[31] =122.; b3[43] =123.; b3[55] =124.;
    b3[ 4] =110.; b3[16] =111.; b3[28] =112.; b3[40] =113.; b3[52] =114.;
    b3[ 1] =100.; b3[13] =101.; b3[25] =102.; b3[37] =103.; b3[49] =104.;
    //-----------------------------------------------------------------//
    b3[ 9] = 30.; b3[21] = 31.; b3[33] = 32.; b3[45] = 33.; b3[57] = 34.;
    b3[ 6] = 20.; b3[18] = 21.; b3[30] = 22.; b3[42] = 23.; b3[54] = 24.;
    b3[ 3] = 10.; b3[15] = 11.; b3[27] = 12.; b3[39] = 13.; b3[51] = 14.;
    b3[ 0] =  0.; b3[12] =  1.; b3[24] =  2.; b3[36] =  3.; b3[48] =  4.;

    c3[29] = -9.; c3[59] = -9.; c3[89] = -9.; c3[119] = -9.; c3[149] = -9.; c3[179] = -9.; c3[209] = -9.;
    c3[24] = -9.; c3[54] = -9.; c3[84] = -9.; c3[114] = -9.; c3[144] = -9.; c3[174] = -9.; c3[204] = -9.;
    c3[19] = -9.; c3[49] = -9.; c3[79] = -9.; c3[109] = -9.; c3[139] = -9.; c3[169] = -9.; c3[199] = -9.;
    c3[14] = -9.; c3[44] = -9.; c3[74] = -9.; c3[104] = -9.; c3[134] = -9.; c3[164] = -9.; c3[194] = -9.;
    c3[ 9] = -9.; c3[39] = -9.; c3[69] = -9.; c3[ 99] = -9.; c3[129] = -9.; c3[159] = -9.; c3[189] = -9.;
    c3[ 4] = -9.; c3[34] = -9.; c3[64] = -9.; c3[ 94] = -9.; c3[124] = -9.; c3[154] = -9.; c3[184] = -9.;
    //-------------------------------------------------------------------------------------------------//
    c3[28] = -9.; c3[58] = -9.; c3[88] = -9.; c3[118] = -9.; c3[148] = -9.; c3[178] = -9.; c3[208] = -9.;
    c3[23] = -9.; c3[53] =230.; c3[83] =231.; c3[113] =232.; c3[143] =233.; c3[173] =234.; c3[203] = -9.;
    c3[18] = -9.; c3[48] =220.; c3[78] =221.; c3[108] =222.; c3[138] =223.; c3[168] =224.; c3[198] = -9.;
    c3[13] = -9.; c3[43] =210.; c3[73] =211.; c3[103] =212.; c3[133] =213.; c3[163] =214.; c3[193] = -9.;
    c3[ 8] = -9.; c3[38] =200.; c3[68] =201.; c3[ 98] =202.; c3[128] =203.; c3[158] =204.; c3[188] = -9.;
    c3[ 3] = -9.; c3[33] = -9.; c3[63] = -9.; c3[ 93] = -9.; c3[123] = -9.; c3[153] = -9.; c3[183] = -9.;
    //-------------------------------------------------------------------------------------------------//
    c3[27] = -9.; c3[57] = -9.; c3[87] = -9.; c3[117] = -9.; c3[147] = -9.; c3[177] = -9.; c3[207] = -9.;
    c3[22] = -9.; c3[52] =130.; c3[82] =131.; c3[112] =132.; c3[142] =133.; c3[172] =134.; c3[202] = -9.;
    c3[17] = -9.; c3[47] =120.; c3[77] =121.; c3[107] =122.; c3[137] =123.; c3[167] =124.; c3[197] = -9.;
    c3[12] = -9.; c3[42] =110.; c3[72] =111.; c3[102] =112.; c3[132] =113.; c3[162] =114.; c3[192] = -9.;
    c3[ 7] = -9.; c3[37] =100.; c3[67] =101.; c3[ 97] =102.; c3[127] =103.; c3[157] =104.; c3[187] = -9.;
    c3[ 2] = -9.; c3[32] = -9.; c3[62] = -9.; c3[ 92] = -9.; c3[122] = -9.; c3[152] = -9.; c3[182] = -9.;
    //-------------------------------------------------------------------------------------------------//
    c3[26] = -9.; c3[56] = -9.; c3[86] = -9.; c3[116] = -9.; c3[146] = -9.; c3[176] = -9.; c3[206] = -9.;
    c3[21] = -9.; c3[51] = 30.; c3[81] = 31.; c3[111] = 32.; c3[141] = 33.; c3[171] = 34.; c3[201] = -9.;
    c3[16] = -9.; c3[46] = 20.; c3[76] = 21.; c3[106] = 22.; c3[136] = 23.; c3[166] = 24.; c3[196] = -9.;
    c3[11] = -9.; c3[41] = 10.; c3[71] = 11.; c3[101] = 12.; c3[131] = 13.; c3[161] = 14.; c3[191] = -9.;
    c3[ 6] = -9.; c3[36] =  0.; c3[66] =  1.; c3[ 96] =  2.; c3[126] =  3.; c3[156] =  4.; c3[186] = -9.;
    c3[ 1] = -9.; c3[31] = -9.; c3[61] = -9.; c3[ 91] = -9.; c3[121] = -9.; c3[151] = -9.; c3[181] = -9.;
    //-------------------------------------------------------------------------------------------------//
    c3[25] = -9.; c3[55] = -9.; c3[85] = -9.; c3[115] = -9.; c3[145] = -9.; c3[175] = -9.; c3[205] = -9.;
    c3[20] = -9.; c3[50] = -9.; c3[80] = -9.; c3[110] = -9.; c3[140] = -9.; c3[170] = -9.; c3[200] = -9.;
    c3[15] = -9.; c3[45] = -9.; c3[75] = -9.; c3[105] = -9.; c3[135] = -9.; c3[165] = -9.; c3[195] = -9.;
    c3[10] = -9.; c3[40] = -9.; c3[70] = -9.; c3[100] = -9.; c3[130] = -9.; c3[160] = -9.; c3[190] = -9.;
    c3[ 5] = -9.; c3[35] = -9.; c3[65] = -9.; c3[ 95] = -9.; c3[125] = -9.; c3[155] = -9.; c3[185] = -9.;
    c3[ 0] = -9.; c3[30] = -9.; c3[60] = -9.; c3[ 90] = -9.; c3[120] = -9.; c3[150] = -9.; c3[180] = -9.;

    ASSERT_TRUE (a3 == b3);
    ASSERT_TRUE (a3 == c3);
    ASSERT_FALSE(a3 == d3);
    ASSERT_FALSE(a3 == e3);
    ASSERT_FALSE(a3 == f3);
}

TEST(field, setValues)
{
    // ONE DIMENSIONAL CASE

    Domain domain1D(Resolution(5), Point(0.0), Distance(1.0));
    Field a1(domain1D, Anchor("C"), GhostCells(0,0));
    Field b1(domain1D, Anchor("C"), GhostCells(0,0));
    Field c1(domain1D, Anchor("C"), GhostCells(1,1));

    a1[0] = 0.0; a1[1] = 1.0; a1[2] = 2.0; a1[3] = 3.0; a1[4] = 4.0;
    b1.setValues({0.0,1.0,2.0,3.0,4.0});
    c1.setValues({-9.0,0.0,1.0,2.0,3.0,4.0,-9.0});

    ASSERT_TRUE(a1 == b1);
    ASSERT_TRUE(a1 == c1);

    // TWO DIMENSIONAL CASE

    Domain domain2D(Resolution(5,4), Point(0.0,0.0), Distance(1.0,1.0));
    Field a2(domain2D, Anchor("C"), GhostCells(0,0,0,0));
    Field b2(domain2D, Anchor("C"), GhostCells(0,0,0,0));
    Field c2(domain2D, Anchor("C"), GhostCells(1,1,1,1));

    a2[3] =30.0; a2[7] =31.0; a2[11] =32.0; a2[15] =33.0; a2[19] =34.0;
    a2[2] =20.0; a2[6] =21.0; a2[10] =22.0; a2[14] =23.0; a2[18] =24.0;
    a2[1] =10.0; a2[5] =11.0; a2[ 9] =12.0; a2[13] =13.0; a2[17] =14.0;
    a2[0] = 0.0; a2[4] = 1.0; a2[ 8] = 2.0; a2[12] = 3.0; a2[16] = 4.0;

    b2.setValues({{30.0,31.0,32.0,33.0,34.0},
                  {20.0,21.0,22.0,23.0,24.0},
                  {10.0,11.0,12.0,13.0,14.0},
                  { 0.0, 1.0, 2.0, 3.0, 4.0}});

    c2.setValues({{-9.0,-9.0,-9.0,-9.0,-9.0,-9.0,-9.0},
                  {-9.0,30.0,31.0,32.0,33.0,34.0,-9.0},
                  {-9.0,20.0,21.0,22.0,23.0,24.0,-9.0},
                  {-9.0,10.0,11.0,12.0,13.0,14.0,-9.0},
                  {-9.0, 0.0, 1.0, 2.0, 3.0, 4.0,-9.0},
                  {-9.0,-9.0,-9.0,-9.0,-9.0,-9.0,-9.0}});

    ASSERT_TRUE(a2 == b2);
    ASSERT_TRUE(a2 == c2);

    // THREE DIMENSIONAL CASE

    Domain domain3D(Resolution(5,4,3), Point(0.0,0.0,0.0), Distance(1.0,1.0,1.0));
    Field a3(domain3D, Anchor("C"), GhostCells(0,0,0,0,0,0));
    Field b3(domain3D, Anchor("C"), GhostCells(0,0,0,0,0,0));
    Field c3(domain3D, Anchor("C"), GhostCells(1,1,1,1,1,1));

    a3[11] =230.; a3[23] =231.; a3[35] =232.; a3[47] =233.; a3[59] =234.;
    a3[ 8] =220.; a3[20] =221.; a3[32] =222.; a3[44] =223.; a3[56] =224.;
    a3[ 5] =210.; a3[17] =211.; a3[29] =212.; a3[41] =213.; a3[53] =214.;
    a3[ 2] =200.; a3[14] =201.; a3[26] =202.; a3[38] =203.; a3[50] =204.;

    a3[10] =130.; a3[22] =131.; a3[34] =132.; a3[46] =133.; a3[58] =134.;
    a3[ 7] =120.; a3[19] =121.; a3[31] =122.; a3[43] =123.; a3[55] =124.;
    a3[ 4] =110.; a3[16] =111.; a3[28] =112.; a3[40] =113.; a3[52] =114.;
    a3[ 1] =100.; a3[13] =101.; a3[25] =102.; a3[37] =103.; a3[49] =104.;

    a3[ 9] = 30.; a3[21] = 31.; a3[33] = 32.; a3[45] = 33.; a3[57] = 34.;
    a3[ 6] = 20.; a3[18] = 21.; a3[30] = 22.; a3[42] = 23.; a3[54] = 24.;
    a3[ 3] = 10.; a3[15] = 11.; a3[27] = 12.; a3[39] = 13.; a3[51] = 14.;
    a3[ 0] =  0.; a3[12] =  1.; a3[24] =  2.; a3[36] =  3.; a3[48] =  4.;

    b3.setValues({{{230.0,231.0,232.0,233.0,234.0},
                   {220.0,221.0,222.0,223.0,224.0},
                   {210.0,211.0,212.0,213.0,214.0},
                   {200.0,201.0,202.0,203.0,204.0}},

                  {{130.0,131.0,132.0,133.0,134.0},
                   {120.0,121.0,122.0,123.0,124.0},
                   {110.0,111.0,112.0,113.0,114.0},
                   {100.0,101.0,102.0,103.0,104.0}},

                  {{ 30.0, 31.0, 32.0, 33.0, 34.0},
                   { 20.0, 21.0, 22.0, 23.0, 24.0},
                   { 10.0, 11.0, 12.0, 13.0, 14.0},
                   {  0.0,  1.0,  2.0,  3.0,  4.0}}});

    c3.setValues({{{ -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0}},

                  {{ -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0,230.0,231.0,232.0,233.0,234.0, -9.0},
                   { -9.0,220.0,221.0,222.0,223.0,224.0, -9.0},
                   { -9.0,210.0,211.0,212.0,213.0,214.0, -9.0},
                   { -9.0,200.0,201.0,202.0,203.0,204.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0}},

                  {{ -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0,130.0,131.0,132.0,133.0,134.0, -9.0},
                   { -9.0,120.0,121.0,122.0,123.0,124.0, -9.0},
                   { -9.0,110.0,111.0,112.0,113.0,114.0, -9.0},
                   { -9.0,100.0,101.0,102.0,103.0,104.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0}},

                  {{ -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, 30.0, 31.0, 32.0, 33.0, 34.0, -9.0},
                   { -9.0, 20.0, 21.0, 22.0, 23.0, 24.0, -9.0},
                   { -9.0, 10.0, 11.0, 12.0, 13.0, 14.0, -9.0},
                   { -9.0,  0.0,  1.0,  2.0,  3.0,  4.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0}},

                  {{ -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0},
                   { -9.0, -9.0, -9.0, -9.0, -9.0, -9.0, -9.0}}});

    ASSERT_TRUE(a3 == b3);
    ASSERT_TRUE(a3 == c3);
}

TEST(field, formatToFit)
{
    ASSERT_EQ( formatToFit(   1.0    ), " +1.0000" );    ASSERT_EQ( formatToFit(  -1.0    ), " -1.0000" );
    ASSERT_EQ( formatToFit(  10.0    ), "+10.0000" );    ASSERT_EQ( formatToFit( -10.0    ), "-10.0000" );
    ASSERT_EQ( formatToFit(  99.9    ), "+99.9000" );    ASSERT_EQ( formatToFit( -99.9    ), "-99.9000" );
    ASSERT_EQ( formatToFit(  99.99994), "+99.9999" );    ASSERT_EQ( formatToFit( -99.99994), "-99.9999" );
    ASSERT_EQ( formatToFit(  99.99995), "+1.0e+02" );    ASSERT_EQ( formatToFit( -99.99995), "-1.0e+02" );
    ASSERT_EQ( formatToFit( 100.0    ), "+1.0e+02" );    ASSERT_EQ( formatToFit(-100.0    ), "-1.0e+02" );
    ASSERT_EQ( formatToFit(   1e1    ), "+10.0000" );    ASSERT_EQ( formatToFit(  -1e1    ), "-10.0000" );
    ASSERT_EQ( formatToFit(   1e2    ), "+1.0e+02" );    ASSERT_EQ( formatToFit(  -1e2    ), "-1.0e+02" );
    ASSERT_EQ( formatToFit(9.94e99   ), "+9.9e+99" );    ASSERT_EQ( formatToFit(-9.94e99  ), "-9.9e+99" );
    ASSERT_EQ( formatToFit(9.95e99   ), " +1e+100" );    ASSERT_EQ( formatToFit(-9.95e99  ), " -1e+100" );
    ASSERT_EQ( formatToFit( 1e100    ), " +1e+100" );    ASSERT_EQ( formatToFit(-1e100    ), " -1e+100" );
}
